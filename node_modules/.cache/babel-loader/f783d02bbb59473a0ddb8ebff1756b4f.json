{"ast":null,"code":"import { SET_EXPENSES, GET_CURRENCY, GET_CURRENCY_SUCCESS, GET_CURRENCY_ERROR, DELETE_ITEM, RENDER_COINS } from '../actions/index';\nconst INITIAL_STATE = {\n  currencies: {},\n  expenses: [],\n  coins: []\n};\n\nconst walletReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case GET_CURRENCY:\n      return { ...state\n      };\n\n    case RENDER_COINS:\n      return { ...state,\n        coins: action.payload\n      };\n\n    case SET_EXPENSES:\n      return { ...state,\n        expenses: [...state.expenses, action.payload]\n      };\n\n    case GET_CURRENCY_SUCCESS:\n      return { ...state,\n        currencies: [action.payload]\n      };\n\n    case GET_CURRENCY_ERROR:\n      return { ...state,\n        error: action.payload.error\n      };\n\n    case DELETE_ITEM:\n      return { ...state,\n        expenses: state.expenses.filter(expense => expense !== action.item)\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default walletReducer;","map":{"version":3,"sources":["/home/bamberg/sd-013-b-project-trybewallet/src/reducers/wallet.js"],"names":["SET_EXPENSES","GET_CURRENCY","GET_CURRENCY_SUCCESS","GET_CURRENCY_ERROR","DELETE_ITEM","RENDER_COINS","INITIAL_STATE","currencies","expenses","coins","walletReducer","state","action","type","payload","error","filter","expense","item"],"mappings":"AAAA,SACEA,YADF,EAEEC,YAFF,EAGEC,oBAHF,EAIEC,kBAJF,EAIsBC,WAJtB,EAKEC,YALF,QAMO,kBANP;AAQA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,UAAU,EAAE,EADQ;AAEpBC,EAAAA,QAAQ,EAAE,EAFU;AAGpBC,EAAAA,KAAK,EAAE;AAHa,CAAtB;;AAMA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGL,aAAT,EAAwBM,MAAxB,KAAmC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACA,SAAKZ,YAAL;AACE,aAAO,EAAE,GAAGU;AAAL,OAAP;;AAEF,SAAKN,YAAL;AACE,aAAO,EAAE,GAAGM,KAAL;AACLF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AADT,OAAP;;AAGF,SAAKd,YAAL;AACE,aAAO,EAAE,GAAGW,KAAL;AACLH,QAAAA,QAAQ,EAAE,CAAC,GAAGG,KAAK,CAACH,QAAV,EAAoBI,MAAM,CAACE,OAA3B;AADL,OAAP;;AAGF,SAAKZ,oBAAL;AACE,aAAO,EAAE,GAAGS,KAAL;AACLJ,QAAAA,UAAU,EAAE,CAACK,MAAM,CAACE,OAAR;AADP,OAAP;;AAGF,SAAKX,kBAAL;AAEE,aAAO,EAAE,GAAGQ,KAAL;AACLI,QAAAA,KAAK,EAAEH,MAAM,CAACE,OAAP,CAAeC;AADjB,OAAP;;AAGF,SAAKX,WAAL;AACE,aAAO,EAAE,GAAGO,KAAL;AACLH,QAAAA,QAAQ,EAAEG,KAAK,CAACH,QAAN,CAAeQ,MAAf,CAAuBC,OAAD,IAAaA,OAAO,KAAKL,MAAM,CAACM,IAAtD;AADL,OAAP;;AAEF;AACE,aAAOP,KAAP;AAzBF;AA2BD,CA5BD;;AA6BA,eAAeD,aAAf","sourcesContent":["import {\n  SET_EXPENSES,\n  GET_CURRENCY,\n  GET_CURRENCY_SUCCESS,\n  GET_CURRENCY_ERROR, DELETE_ITEM,\n  RENDER_COINS,\n} from '../actions/index';\n\nconst INITIAL_STATE = {\n  currencies: {},\n  expenses: [],\n  coins: [],\n};\n\nconst walletReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case GET_CURRENCY:\n    return { ...state,\n    };\n  case RENDER_COINS:\n    return { ...state,\n      coins: action.payload,\n    };\n  case SET_EXPENSES:\n    return { ...state,\n      expenses: [...state.expenses, action.payload],\n    };\n  case GET_CURRENCY_SUCCESS:\n    return { ...state,\n      currencies: [action.payload],\n    };\n  case GET_CURRENCY_ERROR:\n\n    return { ...state,\n      error: action.payload.error,\n    };\n  case DELETE_ITEM:\n    return { ...state,\n      expenses: state.expenses.filter((expense) => expense !== action.item) };\n  default:\n    return state;\n  }\n};\nexport default walletReducer;\n"]},"metadata":{},"sourceType":"module"}